export const CONTRACT_ABI = [
  {
    type: 'constructor',
    inputs: [
      { name: '_owner', type: 'address', internalType: 'address' },
      {
        name: '_functionsRouter',
        type: 'address',
        internalType: 'address',
      },
      { name: '_donId', type: 'bytes32', internalType: 'bytes32' },
      {
        name: '_functionsSubId',
        type: 'uint64',
        internalType: 'uint64',
      },
      {
        name: '_decisionSource',
        type: 'string',
        internalType: 'string',
      },
      {
        name: '_secretReference',
        type: 'bytes',
        internalType: 'bytes',
      },
      {
        name: '_nativeToUsdpriceFeed',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_serverAddress',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'DECISION_TIMEOUT',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getDecisionTimestamp',
    inputs: [{ name: '_requestId', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getRequestIdFromUuid',
    inputs: [{ name: 'uuid', type: 'string', internalType: 'string' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    name: 'handleOracleFulfillment',
    inputs: [
      { name: 'requestId', type: 'bytes32', internalType: 'bytes32' },
      { name: 'response', type: 'bytes', internalType: 'bytes' },
      { name: 'err', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'isPendingDecision',
    inputs: [{ name: '_requestId', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'makeDecision',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 's_decisionTimestamps',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_pendingDecisions',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 's_serverAddress',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'submitDecision',
    inputs: [
      { name: '_requestId', type: 'bytes32', internalType: 'bytes32' },
      {
        name: '_action',
        type: 'uint8',
        internalType: 'enum Viktor.Action',
      },
      { name: '_token', type: 'address', internalType: 'address' },
      { name: '_amount', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateSecretReference',
    inputs: [
      { name: '_secretReference', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateServerAddress',
    inputs: [{ name: '_newServer', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'verifyRequestId',
    inputs: [
      { name: 'uuid', type: 'string', internalType: 'string' },
      { name: 'requestId', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'pure',
  },
  {
    type: 'event',
    name: 'ChainlinkRequestError',
    inputs: [
      {
        name: 'err',
        type: 'bytes',
        indexed: false,
        internalType: 'bytes',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ChainlinkRequestSent',
    inputs: [
      {
        name: 'requestId',
        type: 'bytes32',
        indexed: false,
        internalType: 'bytes32',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'DecisionRequested',
    inputs: [
      {
        name: 'requestId',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'wallet',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'DecisionSubmitted',
    inputs: [
      {
        name: 'requestId',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'action',
        type: 'uint8',
        indexed: true,
        internalType: 'enum Viktor.Action',
      },
      {
        name: 'token',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RequestFulfilled',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RequestSent',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'TokenBought',
    inputs: [
      {
        name: 'token',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'TokenSold',
    inputs: [
      {
        name: 'token',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'EmptyArgs', inputs: [] },
  { type: 'error', name: 'EmptySource', inputs: [] },
  { type: 'error', name: 'NoInlineSecrets', inputs: [] },
  { type: 'error', name: 'OnlyRouterCanFulfill', inputs: [] },
  {
    type: 'error',
    name: 'OwnableInvalidOwner',
    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'OwnableUnauthorizedAccount',
    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'StringsInsufficientHexLength',
    inputs: [
      { name: 'value', type: 'uint256', internalType: 'uint256' },
      { name: 'length', type: 'uint256', internalType: 'uint256' },
    ],
  },
  {
    type: 'error',
    name: 'Viktor__DecisionAlreadySubmitted',
    inputs: [],
  },
  { type: 'error', name: 'Viktor__InvalidRequestId', inputs: [] },
  { type: 'error', name: 'Viktor__NotEnoughTimePassed', inputs: [] },
  { type: 'error', name: 'Viktor__RequestTimedOut', inputs: [] },
  { type: 'error', name: 'Viktor__Unauthorized', inputs: [] },
];
